一、基本
1、shell脚本以“#!/bin/sh”开始
2、“$#”为参数总数
3、“$*”为所有参数
4、“$1”为第一个参数，"$0"为当前脚本路径
5、“$val” 为获取val的值，为防止误解，可加“{}”限定，如"${val}s"
6、read val 可将输入的值赋值给val
7、变量名以（‘a’-'z', 'A'-'Z', '_', '0-9'）组成，不能以数字开始
8、xargs参数传递过滤器，将管道前面的运行结果传递给xargs，并将换行和空白号替换成空格
	cat 123.txt | xargs（读取文件内容并一行输出到xargs）
	cat 123.txt | xargs -I {} echo {} (-I {},用{}替换xargs并执行每一个值)
9、“$$”表示当前进程（其实是$表示当前进程，前面一个只是表示变量引用）

二、数组
array_name[index]="YC" //赋值
1、初始化数组
	a、array_name=(val1 val2...valn)//用空格隔开
	b、arr
		arr[0]="YC"
		arr[1]="H"
2、遍历数组
	a、for val in ${arr[*]}
	b、for val in ${arr[@]}
3、数组切片
	a=(1 2 3 4 5)
	${a[@]:1:3}
三、运算符
	1、算术运行符：(加减乘除，%，/， ==， !=),运算符两边需要有空格号（注意，*需要改成“\*”）
	如：`busybox expr 12 == 2`
	2、关系运算符：-eq(==), -ne(!=), -gt(>), -lt(<), -ge(>=), -le(<=),放在方括号里面[],周围并有空格号
	如：if [ $a -lt $b ]
	3、bool运算符：!(非)， -o(或)，-a(与)
	如 if [ $a -lt 10 -o $b -gt 20]
	4、字符串运算符：
	5、文件测试操作
	
四、if...
	if []
	then
		...
	elif []
	then
		...
	else
		...
	fi
	
五、case ...esae
	case $val in
	"a")
		...
		;;
	"b":
		...
		;;
		
六、while循环
	while []
	do
		...
	done
	
七、until循环
	until []
	do
		...
	done
	
八、select
	select val in val1 val2...
	do
		case $Val in
		val1|val2)
			...
			;;
		*)
			...
			;;
		esae
	 ...
	done

九、break、continue
	while循环和for循环退出，break退出当前循环，break n退出n层循环(continue跳出本次循环， continue n 可跳出n次循环，但无作用？)
	
十、函数,函数内可通过$n来获取第n个参数，返回值在调用函数后通过$？获取
function_name () {
}

十一、awk命令：'{}'把文件逐行读入，再以空格将每行切片，切开后再进入其它处理，第一个域为$1，第二个为$2，$NF为最后一个切片,$0为整条记录
-F "" //-F改变默认分隔符，中间可能“|”添加多个分隔符
netcfg | busybox awk '{print $3}' | busybox awk -F "/" '{print $1}'
格式：awk [-F 分割符]'pattern + action' {filenames}， pattern为正则表达式，用两个"//"包括
1、ps | busybox awk '{print $3}'
读入有“\n”换行符分割的一条记录，默认分割符是“空白键”或者【Tab】键
2、ps | busybox awk -F '.' '{print $1}'
-F 添加分隔符
3、 ps | busybox awk '{print $1 "\t" $2}'
action 操作多个域
4、ps | busybox awk 'BEGIN {print "name, pid"} {print $1 "\t" $2} END {print "blue, hello"}'
BEGIN {}，END {} 添加开始和结束操作
5、ps | busybox awk '/root/'
匹配pattern
6、ps | busybox awk '/root/{print $2}'
匹配pattern+action


十二、sed替换命令：'s/原来字符串/新字符串/'
netcfg | busybox sed 's/UP/DOWN/'
